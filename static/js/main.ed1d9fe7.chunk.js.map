{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onAddMovie","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","foundMovie","setFoundMovie","_useState5","_useState6","loading","setLoading","_useState7","_useState8","isError","setIsError","_Fragment","onSubmit","event","preventDefault","fetch","concat","then","res","json","catch","Response","Error","getMovie","trim","response","Title","Plot","Poster","imdbID","finally","htmlFor","type","id","placeholder","cn","value","onChange","target","disabled","onClick","App","setMovie","some","prevMovies","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"kTAQaA,EAA6B,SAAHC,GAAA,IAAMC,EAAKD,EAALC,MAAK,OAChDC,eAAA,OAAKC,UAAU,OAAO,UAAQ,YAAWC,SAAA,CACvCC,cAAA,OAAKF,UAAU,aAAYC,SACzBC,cAAA,UAAQF,UAAU,gBAAeC,SAC/BC,cAAA,OACE,UAAQ,cACRC,IAAKL,EAAMM,OACXC,IAAI,kBAIVN,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAC3BF,eAAA,OAAKC,UAAU,QAAOC,SAAA,CACpBC,cAAA,OAAKF,UAAU,aAAYC,SACzBC,cAAA,UAAQF,UAAU,iBAAgBC,SAChCC,cAAA,OACEC,IAAI,wBACJE,IAAI,aAIVH,cAAA,OAAKF,UAAU,gBAAeC,SAC5BC,cAAA,KAAGF,UAAU,aAAa,UAAQ,aAAYC,SAAEH,EAAMQ,aAI1DP,eAAA,OAAKC,UAAU,UAAU,UAAQ,mBAAkBC,SAAA,CAChDH,EAAMS,YACPL,cAAA,SACAA,cAAA,KAAGM,KAAMV,EAAMW,QAAS,UAAQ,WAAUR,SAAC,iBAK3C,ECjCKS,G,MAA8B,SAAHb,GAAA,IAAMc,EAAMd,EAANc,OAAM,OAClDT,cAAA,OAAKF,UAAU,SAAQC,SACpBU,EAAOC,KAAI,SAAAd,GAAK,OACfI,cAACN,EAAS,CAERE,MAAOA,GADFA,EAAMe,OAEX,KAEA,G,0BCLKC,EAA6B,SAAHjB,GAAwB,IAAlBkB,EAAUlB,EAAVkB,WAC3CC,EAA0BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,EAAoCL,mBAAuB,MAAKM,EAAAJ,YAAAG,EAAA,GAAzDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAA8BT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,EAA8Bb,oBAAS,GAAMc,EAAAZ,YAAAW,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GA6C1B,OACEhC,eAAAmC,WAAA,CAAAjC,SAAA,CACEF,eAAA,QAAMC,UAAU,aAAamC,SA1CZ,SAACC,GACpBA,EAAMC,iBACNR,GAAW,GClBR,SAAkBT,GACvB,OAAOkB,MAAM,GAADC,OAHE,0CAGS,OAAAA,OAAMnB,IAC1BoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAM,IACtBC,OAAM,iBAAO,CACZC,SAAU,QACVC,MAAO,mBACR,GACL,CDaIC,CAAS1B,EAAM2B,QACZP,MAAK,SAACQ,GACL,GAAI,UAAWA,EAAU,CACvB,IACEC,EAIED,EAJFC,MACAC,EAGEF,EAHFE,KACAC,EAEEH,EAFFG,OACAC,EACEJ,EADFI,OAGF3B,EAAc,CACZnB,MAAO2C,EACP1C,YAAa2C,EACb9C,OAAmB,QAAX+C,EAnBK,4DAmB+BA,EAC5C1C,QAAQ,8BAAD8B,OAAgCa,GACvCvC,OAAQuC,GAEZ,MACEnB,GAAW,EAEf,IACCU,OAAM,kBAAMV,GAAW,EAAK,IAC5BoB,SAAQ,kBAAMxB,GAAW,EAAM,GACpC,EAewD5B,SAAA,CAClDF,eAAA,OAAKC,UAAU,QAAOC,SAAA,CACpBC,cAAA,SAAOF,UAAU,QAAQsD,QAAQ,cAAarD,SAAC,gBAI/CC,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,SACE,UAAQ,aACRqD,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZzD,UAAW0D,IAAG,QAAS,CACrB,YAAa1B,IAEf2B,MAAOvC,EACPwC,SAvBc,SAACxB,GACzBf,EAASe,EAAMyB,OAAOF,OACtB1B,GAAW,EACb,MAwBSD,GACC9B,cAAA,KAAGF,UAAU,iBAAiB,UAAQ,eAAcC,SAAC,4CAMzDF,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC/BC,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,UACE,UAAQ,eACRqD,KAAK,SACLvD,UAAW0D,IACT,SACA,WACA,CACE,aAAc9B,IAGlBkC,UAAW1C,EAAMnB,SAEhBuB,EACC,eAEA,mBAILA,GACCtB,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,UACE,UAAQ,YACRqD,KAAK,SACLvD,UAAU,oBACV+D,QAnEG,WACfhD,EAAWS,GACXH,EAAS,IACTI,EAAc,KAChB,EA+DgCxB,SACnB,4BAQRuB,GACCzB,eAAA,OAAKC,UAAU,YAAY,UAAQ,mBAAkBC,SAAA,CACnDC,cAAA,MAAIF,UAAU,QAAOC,SAAC,YACtBC,cAACN,EAAS,CAACE,MAAO0B,SAK5B,EEhIawC,G,MAAM,WACjB,IAAAhD,EAA2BC,mBAAkB,IAAGC,EAAAC,YAAAH,EAAA,GAAzCL,EAAMO,EAAA,GAAE+C,EAAQ/C,EAAA,GAWvB,OACEnB,eAAA,OAAKC,UAAU,OAAMC,SAAA,CACnBC,cAAA,OAAKF,UAAU,eAAcC,SAC3BC,cAACQ,EAAU,CAACC,OAAQA,MAGtBT,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAACY,EAAS,CAACC,WAhBA,SAACS,GACMb,EACnBuD,MAAK,SAAApE,GAAK,OAAIA,EAAMe,SAAWW,EAAWX,MAAM,KAGjDoD,GAAS,SAAAE,GAAU,SAAA5B,OAAA6B,YAAQD,GAAU,CAAE3C,GAAa,GAExD,QAaF,GCzBA6C,IAASC,OAAOpE,cAAC8D,EAAG,IAAKO,SAASC,eAAe,Q","file":"static/js/main.ed1d9fe7.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\nimport './MoviesList.scss';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport cn from 'classnames';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\nimport './FindMovie.scss';\n\ntype Props = {\n  onAddMovie: (foundMovie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAddMovie }) => {\n  const [query, setQuery] = useState('');\n  const [foundMovie, setFoundMovie] = useState<Movie | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  // eslint-disable-next-line max-len\n  const DEFAULT_POSTER = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setLoading(true);\n\n    getMovie(query.trim())\n      .then((response) => {\n        if ('Title' in response) {\n          const {\n            Title,\n            Plot,\n            Poster,\n            imdbID,\n          } = response;\n\n          setFoundMovie({\n            title: Title,\n            description: Plot,\n            imgUrl: Poster === 'N/A' ? DEFAULT_POSTER : Poster,\n            imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n            imdbId: imdbID,\n          });\n        } else {\n          setIsError(true);\n        }\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setLoading(false));\n  };\n\n  const addMovie = () => {\n    onAddMovie(foundMovie as Movie);\n    setQuery('');\n    setFoundMovie(null);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setIsError(false);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', {\n                'is-danger': isError,\n              })}\n              value={query}\n              onChange={handleInputChange}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn(\n                'button',\n                'is-light',\n                {\n                  'is-loading': loading,\n                },\n              )}\n              disabled={!query}\n            >\n              {foundMovie ? (\n                'Search again'\n              ) : (\n                'Find a movie'\n              )}\n            </button>\n          </div>\n          {foundMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {foundMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={foundMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=7ef76a4';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport './App.scss';\n\nexport const App = () => {\n  const [movies, setMovie] = useState<Movie[]>([]);\n\n  const addMovie = (foundMovie: Movie) => {\n    const isMovieExists = movies\n      .some(movie => movie.imdbId === foundMovie.imdbId);\n\n    if (!isMovieExists) {\n      setMovie(prevMovies => [...prevMovies, foundMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAddMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}